#include<iostream>
#include<vector>
using namespace std;

struct TreeNode {
      int val;
      TreeNode *left;
      TreeNode *right;
      TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
private:
    TreeNode *root;

    void buildTree2(TreeNode *&root, vector<int> &inorder, int inorder1, int inorder2,
                                     vector<int> &postorder, int postorder1, int postorder2){
        if(inorder1>inorder2 || postorder1>postorder2) return;
        root = new TreeNode(postorder[postorder2]);
        int index;
        for(index=inorder1;index<=inorder2;index++){
            if(inorder[index]==root->val){
               break;    
            }
        }
        buildTree2(root->left,inorder,inorder1,index-1,postorder,postorder1,index-1);
        buildTree2(root->right,inorder,index+1,inorder2,postorder,index,postorder2-1);
    }
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
          if(inorder.size()==0 || postorder.size()==0) return NULL;
          buildTree2(root, inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
          return root;
    }
};

int main(int argc,char* argv[]){
    Solution sln;
    vector<int>  inorder{1,3,2};
    vector<int>  postorder{3,2,1};
    sln.buildTree(inorder,postorder);
    return 0;
}
